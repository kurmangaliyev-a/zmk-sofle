#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp TILDE      &rgb_ug RGB_OFF &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &kp PRINTSCREEN &kp C_PLAY_PAUSE &kp C_PREV      &kp C_NEXT      &none              &none
&kp TAB     &kp W          &lt 3 L         &lt 2 R         &lt 1 B          &kp Z            &kp DOWN_ARROW   &kp SEMI        &lt 1 Q          &lt 2 U         &lt 3 D         &kp J              &kp BSLH
&kp GRAVE   &mt LSHIFT S   &mt LCTRL H     &mt LEFT_GUI N  &mt LEFT_ALT T   &kp COMMA        &kp LEFT_ARROW   &kp DOT         &mt RIGHT_ALT A  &mt RIGHT_GUI E &mt RCTRL O     &mt RIGHT_SHIFT I  &kp APOS
&none       &kp F          &kp M           &kp V           &kp C            &kp FSLH         &kp RIGHT_ARROW  &kp G           &kp P            &kp X           &kp K           &kp Y              &none
&none       &none          &kp LCLK        &kp ENTER       &kp DELETE       &kp SPACE        &kp ENTER        &kp RCLK        &kp BACKSPACE    &kp SPACE       &none           &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "AzaMage";
        };

        layer_1 {
            bindings = <
&trans      &trans           &trans          &trans           &trans           &trans             &trans   &trans           &trans           &trans      &trans     &trans           &trans
&trans      &kp GRAVE        &mkp RCLK       &mmv MOVE_UP     &mkp LCLK        &mkp MCLK          &trans   &kp PG_UP        &kp HOME         &kp UP      &kp END    &kp MINUS        &kp EQUAL
&trans      &trans           &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &trans             &trans   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET &kp RIGHT_BRACKET
&trans      &trans           &trans          &trans           &trans           &trans             &trans   &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12          &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &trans   &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&none      &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &trans  &trans  &trans  &trans      &trans     &trans       &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans         &trans  &trans  &trans  &trans      &trans     &kp UNDER    &kp PLUS
&trans     &out OUT_TOG  &out OUT_TOG    &trans        &trans        &trans         &trans  &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans         &trans  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans         &trans  &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&none    &none    &none    &none     &none    &none    &none       &none    &none    &none     &none   &none     &none
&none    &kp N1   &kp N2   &kp N3    &kp N4   &kp N5   &none       &kp N6   &kp N7   &kp N8    &kp N9  &kp N0    &none
&none    &trans   &trans   &trans    &trans   &none    &none       &none    &trans   &trans    &trans  &trans    &none
&kp F11  &kp F1   &kp F2   &kp F3    &kp F4   &kp F5   &none       &kp F6   &kp F7   &kp F8    &kp F9  &kp F10   &kp F12
&none    &none    &none    &none     &none    &none    &trans      &none    &none    &none     &none   &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&none    &none    &none    &none     &none    &none    &none       &none    &none    &none     &none   &none     &none
&none    &kp N1   &kp N2   &kp N3    &kp N4   &kp N5   &none       &kp N6   &kp N7   &kp N8    &kp N9  &kp N0    &none
&none    &trans   &trans   &trans    &trans   &none    &none       &none    &trans   &trans    &trans  &trans    &none
&kp F11  &kp F1   &kp F2   &kp F3    &kp F4   &kp F5   &none       &kp F6   &kp F7   &kp F8    &kp F9  &kp F10   &kp F12
&none    &none    &none    &none     &none    &none    &trans      &none    &none    &none     &none   &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};